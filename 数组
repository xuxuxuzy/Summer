下课了，牛牛要去食堂吃饭，他们学校的食堂有很多个门，而且整个建筑物是圆形的。
只不过要去吃饭的人很多，在里面吃饭的人也很多，所以大家都在门口外面排队等待吃饭。 
所以牛牛采取了这样的一个策略：刚开始时，牛牛在第一个门口，如果这个门口有人在排队，那么他选择花费1分钟时间走到下一个门口，
如果没有人的话，牛牛就可以直接进去吃饭啦。食堂的每一个门，每1分钟排队的人数都会减少一个。 
现在给你门的数量n，和每个门外排队的人的数量，如果按照牛牛的策略，那么牛牛最终会在哪个门进去吃饭呢？
请你进行编程求解，返回牛牛最终是从第几个门进入食堂吃饭的。 

思路
这个题可以求每一个门在第几轮会小于等于0；记录下来进行比较，最小的那个就是答案；

class Solution {
public:
    /**
     * 返回牛牛最终是从第几个门进入食堂吃饭的
     * @param n int整型 代表门的数量
     * @param a int整型vector 代表每个门外等待的人数
     * @return int整型
     */
    int solve(int n, vector<int>& a) {
        int i,b[100005],minn=0;
        for(i=0;i<n;i++)
        {
            if(a[i]-i<=0)
            {
                minn=i;
                break;
            }
                
            else{
                 b[i]=(a[i]/n)+1;
            }
         if(b[i]<b[minn])
             minn=i;
                
            } 
        return minn+1;
    }
}; 
