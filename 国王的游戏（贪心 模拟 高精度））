- *国王的游戏*


恰逢 H 国国庆，国王邀请 n 位大臣来玩一个有奖游戏。首先，他让每个大臣在左、右手上面分别写下一个整数，国王自己也在左、右手上各写一个整数。然后，让这 n 位大臣排成一排，国王站在队伍的最前面。排好队后，所有的大臣都会获得国王奖赏的若干金币，每位大臣获得的金币数分别是：排在该大臣前面的所有人的左手上的数的乘积除以他自己右手上的数，然后向下取整得到的结果。
 国王不希望某一个大臣获得特别多的奖赏，所以他想请你帮他重新安排一下队伍的顺序，使得获得奖赏最多的大臣，所获奖赏尽可能的少。注意，国王的位置始终在队伍的最前面。



## 输入描述:



```
第一行包含一个整数 n ，表示大臣的人数。
第二行包含两个整数 a 和 b ，之间用一个空格隔开，分别表示国王左手和右手上的整数。
接下来 n 行，每行包含两个整数 a 和 b ，之间用一个空格隔开，分别表示每个大臣左手和右手上的整数。
```



## 输出描述:



```
一个整数，表示重新排列后的队伍中获奖赏最多的大臣所获得的金币数。
```



示例1

## 输入

[复制](javascript:void(0);)

```
3 
1 1 
2 3 
7 4 
4 6
```

## 输出

[复制](javascript:void(0);)

```
2
```

## 说明

```
按 1 、 2 、 3 这样排列队伍，获得奖赏最多的大臣所获得金币数为 2 ；
按 1 、 3 、 2 这样排列队伍，获得奖赏最多的大臣所获得金币数为 2 ；
按 2 、 1 、 3 这样排列队伍，获得奖赏最多的大臣所获得金币数为 2 ；
按 2 、 3 、 1 这样排列队伍，获得奖赏最多的大臣所获得金币数为 9 ；
按 3 、 1 、 2 这样排列队伍，获得奖赏最多的大臣所获得金币数为 2 ；
按 3 、 2 、 1 这样排列队伍，获得奖赏最多的大臣所获得金币数为 9 。
因此，奖赏最多的大臣最少获得 2 个金币，答案输出 2 。
```



## 备注:



```
对于 20%的数据，有 1≤ n≤ 10,0 ＜ a,b ＜ 8 ；
对于 40%的数据，有 1≤ n≤20,0 ＜a,b＜8 ；

对于 60%的数据，有 1≤ n≤100 ；
对于 60%的数据，保证答案不超过 109 ；对于 100%的数据，有 1 ≤ n ≤1,000,0 ＜ a,b ＜ 10000 。
```



题解

 我们从普遍的规律入手，在这个队伍中连续的两个人A，B，如果他们两个人调换位置，显然，受到影响的只有这两个人，对他们前面和后面的人都没有影响。

现在我们假设a，b是第![img](https://www.nowcoder.com/equation?tex=i&preview=true)个人和第![img](https://www.nowcoder.com/equation?tex=i%2B1&preview=true)个人

假设![img](https://www.nowcoder.com/equation?tex=i&preview=true)前面积的值为![img](https://www.nowcoder.com/equation?tex=s&preview=true)，现在如果![img](https://www.nowcoder.com/equation?tex=i&preview=true)在前面，那么![img](https://www.nowcoder.com/equation?tex=max(s%2Fb_%7Bi%7D%2Cs*a_%7Bi%7D%2Fb_%7Bi%2B1%7D)&preview=true),如果调换位置，也就是![img](https://www.nowcoder.com/equation?tex=i%2B1&preview=true)换在前面

那么![img](https://www.nowcoder.com/equation?tex=max(s%2Fb_%7Bi%2B1%7D%2Cs*a_%7Bi%2B1%7D%2Fb_%7Bi%7D)&preview=true)，显然![img](https://www.nowcoder.com/equation?tex=s*a_%7Bi%7D%2Fb_%7Bi%2B1%7D&preview=true)大于等于![img](https://www.nowcoder.com/equation?tex=s%2Fb_%7Bi%7D&preview=true)，而![img](https://www.nowcoder.com/equation?tex=s*a_%7Bi%2B1%7D%2Fb_%7Bi%7D&preview=true)也显然大于等于![img](https://www.nowcoder.com/equation?tex=s%2Fb_%7Bi%2B1%7D&preview=true)



所以我们要i在前面，就要让![img](https://www.nowcoder.com/equation?tex=s*a_%7Bi%7D%2Fb_%7Bi%2B1%7D%20%20%5Cleq%20s%20*a_%7Bi%2B1%7D%2Fb_%7Bi%7D&preview=true)



化简就可以得到![img](https://www.nowcoder.com/equation?tex=a_%7Bi%7D*b_%7Bi%7D%20%5Cleq%20a_%7Bi%2B1%7D*b_%7Bi%2B1%7D&preview=true)



这个就是贪心的结果 

然后还要注意的是数据范围，要用到高精度

代码

```c++
#include<iostream>
#include<algorithm>
#include<cstring>
using namespace std;
struct node{
    int fir,sec;
    bool operator < (const node &a)const{
        return fir*sec<a.fir*a.sec;
    }
}st[1005];
int sum[5050];
int vis[5050];
int arr[5050];
int len=1,tex=1;
void cheng(int b)
{
    for(int i=1;i<=len;i++)
    {
        vis[i]*=b;
    }
    for(int i=1;i<=len;i++)
    {
        vis[i+1]+=vis[i]/10;
        vis[i]%=10;
    }
    if(vis[len+1]!=0) len++;
    while(vis[len]>10)
    {
        vis[len+1]+=vis[len]/10;
        vis[len]%=10;
        len++;
    }
}
void chu(int b)
{
    int t=0,flag=0,ans=0;
    for(int i=len;i>=1;i--)
    {
        t=t*10+vis[i];
        if(t<b&&flag==0) continue;
        else{
            flag=1;
            arr[++ans]=t/b;
            t%=b;
        }
    }
    if(ans>tex)
    {
        for(int i=1;i<=ans;i++) sum[i]=arr[i];
        tex=ans;
    }
    else{
        if(ans==tex)
        {
            for(int i=1;i<=ans;i++)
            {
                if(arr[i]>sum[i])
                {
                    for(int i=1;i<=ans;i++)
                    {
                        sum[i]=arr[i];
                    }
                    break;
                }
            }
        }
    }
}
int main()
{
    int n;
    cin>>n;
    for(int i=0;i<=n;i++)
    {
        cin>>st[i].fir>>st[i].sec;
    }
    sort(st+1,st+1+n);
    sum[1]=vis[1]=1;
    for(int i=1;i<=n;i++)
    {
        cheng(st[i-1].fir);
        chu(st[i].sec);
    }
    for(int i=1;i<=tex;i++) cout<<sum[i];
    cout<<"\n";
    return 0;
}
```

