图书馆中每本书都有一个图书编码，可以用于快速检索图书，这个图书编码是一个正整数。 
每位借书的读者手中有一个需求码，这个需求码也是一个正整数。如果一本书的图书编码恰好以读者的需求码结尾，那么这本书就是这位读者所需要的。 
小 D 刚刚当上图书馆的管理员，她知道图书馆里所有书的图书编码，她请你帮她写一个程序，对于每一位读者，求出他所需要的书中图书编码最小的那本书，如果没有他需要的书，请输出-1。 



输入描述: 
输入的第一行，包含两个正整数 n 和 q，以一个空格分开，分别代表图书馆里书的数量和读者的数量。
接下来的 n 行，每行包含一个正整数，代表图书馆里某本书的图书编码。
接下来的 q 行，每行包含两个正整数，以一个空格分开，第一个正整数代表图书馆里读者的需求码的长度，第二个正整数代表读者的需求码。

输出描述: 
输出有 q 行，每行包含一个整数，如果存在第 i 个读者所需要的书，则在第 i 行输出第 i 个读者所需要的书中图书编码最小的那本书的图书编码，否则输出-1。
示例1 
输入 
5 5
2123
1123
23
24
24
2 23
3 123
3 124
2 12
2 12
输出 
23
1123
-1
-1
-1
说明 
第一位读者需要的书有 2123、1123、23，其中 23 是最小的图书编码。
第二位读者需要的书有 2123、1123，其中 1123 是最小的图书编码。
对于第三位，第四位和第五位读者，没有书的图书编码以他们的需求码结尾，即没有他们需要的书，输出-1。 

备注: 

对于 20%的数据，1 ≤ n ≤ 2。 另有 20%的数据，q= 1。
另有 20%的数据，所有读者的需求码的长度均为1。
另有 20%的数据，所有的图书编码按从小到大的顺序给出。
对于 100%的数据，1≤n ≤1,000，1 ≤ q ≤ 1,000，所有的图书编码和需求码均不超过 10,000,000。

解答 
首先我们看到的是：这是一个字符串匹配的题目。但是由于字符串都比较小，最多才4位，完全可以跑O(n)，由于是子串匹配，为了逐位比较方便，可以存string或者char，但是又因位需要输出最小的，那就应该首选string了。 
然而string不会用怎么办？我给大家带来一个用int存的解法。由于在输入询问的时候需要输入这个数字的位数，我们可以让那些图书编号只拿出来从后往前数和输入的询问数字位数相同的位数，然后来看看这两个数字是不是相同，相同输出这个编号，没有就输出-1。 
那么怎么做到从后向取相同的位数呢？对了，就是取模！ 
下面贴代码 
#include <iostream>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <algorithm>
using namespace std;
int q,n,num[1010],need,sum;//q和n不解释，num是图书编号，need和sum是输入的需求编号和需求编号位数。 
inline void FIND(int NEED,int SUM)//形参NEED是需求编号，SUM是位数 
{
    for(int i=1;i<=n;i++)//对图书编号取模，留下和需求位数一样的位数就可以比较了。 
        if(num[i]%SUM==NEED){printf("%d\n",num[i]);return ;}//注意是输出这个图书编号。 
    printf("-1\n");
}
int main()
{
    scanf("%d%d",&n,&q);
    for(int i=1;i<=n;i++)
        scanf("%d",&num[i]);
    sort(num+1,num+n+1);//由于是先输出编号小的，所以sort，char可办不到。 
    for(int i=1;i<=q;i++)
    {
        scanf("%d%d",&sum,&need);
        FIND(need,pow(10,sum));//一个数%10的sum次方就变成和需求编号位数一样了。 
    }
    return 0;
}
